{"ast":null,"code":"var _jsxFileName = \"/Users/shreya1821/Dev/Wcc_cricket/src/Components/Categories/create/index.jsx\";\nimport React, { Component } from \"react\";\nimport { Card, Layout, Input, Button, Form, Upload, Spin } from 'antd';\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\nimport './index.scss';\nimport AdminHeader from \"../../AdminHeader\";\nimport { routes } from \"../../../Controller/Routes\";\nimport { history } from \"../../../Controller/history\";\nimport { BASE_URL, S3_URL } from \"../../../Controller/common\";\nimport { get, isEmpty, has } from 'lodash';\nimport { createCategory, getCategoryById, updateCategory } from \"../../../Controller/api/category.Service\";\nconst {\n  Content\n} = Layout;\n\nfunction getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nclass ManageCategories extends Component {\n  constructor(...args) {\n    super(...args);\n    this.formRef = React.createRef();\n    this.state = {\n      buttonLoading: false,\n      loading: false,\n      imagesLoading: false,\n      fileList: [],\n      categoryData: {},\n      fetching: false\n    };\n\n    this.handleChange = info => {\n      if (info.file.status === 'uploading') {\n        this.setState({\n          loading: true\n        });\n        return;\n      }\n\n      if (info.file.status === 'done') {\n        // Get this url from response in real world.\n        this.formRef.current.setFieldsValue({\n          image: get(info, 'file.response.response.image', '')\n        });\n        getBase64(info.file.originFileObj, imageUrl => this.setState({\n          imageUrl,\n          loading: false\n        }));\n      }\n    };\n\n    this.handleChangeImages = ({\n      fileList\n    }) => {\n      console.log(fileList, 'here');\n      this.setState({\n        fileList\n      });\n      this.formRef.current.setFieldsValue({\n        images: fileList.map((file, index) => {\n          if (has(file, 'response')) {\n            return file.response.response.image;\n          } else {\n            return file.name;\n          }\n        })\n      });\n    };\n\n    this.handleRemove = item => {\n      console.log(item, 'remove');\n      this.setState({\n        fileList: this.state.fileList.filter(file => file.url !== item.url)\n      }, () => {\n        this.formRef.current.setFieldsValue({\n          images: [...this.state.fileList]\n        });\n      });\n    };\n\n    this.onFinish = values => {\n      this.setState({\n        buttonLoading: true\n      });\n      const catId = this.props.match.params.id;\n\n      if (catId) {\n        updateCategory(values, catId).then(res => {\n          this.setState({\n            buttonLoading: false\n          });\n          history.push(routes.dashboard.categories.self);\n        }).catch(err => {\n          console.log(\"edit err\", err);\n        });\n      } else {\n        createCategory(values).then(res => {\n          this.setState({\n            buttonLoading: false\n          });\n          history.push(routes.dashboard.categories.self);\n        }).catch(err => {\n          this.setState({\n            buttonLoading: false\n          });\n          console.log(\"error\");\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    const catId = this.props.match.params.id;\n\n    if (catId) {\n      this.setState({\n        fetching: true\n      });\n      getCategoryById(catId).then(res => {\n        this.setState({\n          fileList: res.data.response.category.images.map((image, index) => {\n            return {\n              uid: `-${index + 1}`,\n              name: image,\n              status: 'done',\n              url: `${S3_URL}${image}`\n            };\n          }),\n          imageUrl: `${S3_URL}${res.data.response.category.image}`,\n          categoryData: res.data.response.category,\n          fetching: false\n        });\n        this.formRef.current.setFieldsValue({ ...res.data.response.category\n        });\n      }).catch(err => {\n        this.setState({\n          fetching: false\n        });\n        console.log(\"err---->\", err);\n      });\n    }\n  }\n\n  render() {\n    const {\n      loading,\n      imageUrl,\n      fileList,\n      imagesLoading\n    } = this.state;\n    const catId = this.props.match.params.id;\n    const uploadButton = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }\n    }, loading ? /*#__PURE__*/React.createElement(LoadingOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 20\n      }\n    }) : /*#__PURE__*/React.createElement(PlusOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 42\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: 8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, \"Upload\"));\n    const uploadImagesButton = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }\n    }, imagesLoading ? /*#__PURE__*/React.createElement(LoadingOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 26\n      }\n    }) : /*#__PURE__*/React.createElement(PlusOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 48\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: 8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }, \"Upload Images\"));\n\n    if (this.state.fetching) {\n      return /*#__PURE__*/React.createElement(Spin, {\n        size: \"large\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 14\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Layout, {\n      className: \"layout\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(AdminHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Content, {\n      style: {\n        padding: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"site-layout-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      title: catId ? \"Edit Category\" : \"Create Category\",\n      extra: /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        onClick: () => history.push(routes.dashboard.categories.self),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 80\n        }\n      }, \"Catetories\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      ref: this.formRef,\n      name: \"basic\",\n      labelCol: {\n        span: 5\n      },\n      wrapperCol: {\n        span: 8\n      },\n      onFinish: this.onFinish // onFinishFailed={onFinishFailed}\n      ,\n      autoComplete: \"off\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Category Name\",\n      name: \"name\",\n      rules: [{\n        required: true,\n        message: 'Please Enter Category Name'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Subtitle\",\n      name: \"subtitle\",\n      rules: [{\n        required: true,\n        message: 'Please Enter Category Subtitle!'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Input.TextArea, {\n      maxLength: 170,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Description\",\n      name: \"description\",\n      rules: [{\n        required: true,\n        message: 'Please Enter Category Description!'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Input.TextArea, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Category Image(651PX X 651PX)\",\n      name: \"image\",\n      rules: [{\n        required: true,\n        message: 'Please Upload Category Image'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Upload, {\n      name: \"image\",\n      listType: \"picture-card\",\n      className: \"avatar-uploader\",\n      showUploadList: false,\n      action: `${BASE_URL}/upload-image/` //beforeUpload={beforeUpload}\n      ,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 21\n      }\n    }, imageUrl ? /*#__PURE__*/React.createElement(\"img\", {\n      src: imageUrl,\n      alt: \"avatar\",\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 35\n      }\n    }) : uploadButton)), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Category Images (345px \\xD7 533px)\",\n      name: \"images\",\n      rules: [{\n        required: true,\n        message: 'Please Upload 3 side category images'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Upload, {\n      name: \"image\",\n      listType: \"picture-card\",\n      className: \"avatar-uploader\" // multiple={true}\n      // showUploadList={true}\n      ,\n      fileList: isEmpty(fileList) ? null : fileList,\n      action: `${BASE_URL}/upload-image/` //beforeUpload={beforeUpload}\n      ,\n      onChange: this.handleChangeImages,\n      onRemove: this.handleRemove,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 21\n      }\n    }, fileList.length >= 3 ? null : uploadImagesButton)), /*#__PURE__*/React.createElement(Form.Item, {\n      wrapperCol: {\n        offset: 5,\n        span: 12\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        width: \"200px\"\n      },\n      loading: this.state.buttonLoading,\n      type: \"primary\",\n      htmlType: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 21\n      }\n    }, catId ? \"Edit\" : \"Create\"))))))));\n  }\n\n}\n\nexport default ManageCategories;","map":{"version":3,"sources":["/Users/shreya1821/Dev/Wcc_cricket/src/Components/Categories/create/index.jsx"],"names":["React","Component","Card","Layout","Input","Button","Form","Upload","Spin","LoadingOutlined","PlusOutlined","AdminHeader","routes","history","BASE_URL","S3_URL","get","isEmpty","has","createCategory","getCategoryById","updateCategory","Content","getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","ManageCategories","formRef","createRef","state","buttonLoading","loading","imagesLoading","fileList","categoryData","fetching","handleChange","info","file","status","setState","current","setFieldsValue","image","originFileObj","imageUrl","handleChangeImages","console","log","images","map","index","response","name","handleRemove","item","filter","url","onFinish","values","catId","props","match","params","id","then","res","push","dashboard","categories","self","catch","err","componentDidMount","data","category","uid","render","uploadButton","marginTop","uploadImagesButton","padding","span","required","message","width","length","offset"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Card, Layout, Input, Button, Form, Upload, Spin, } from 'antd';\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\nimport './index.scss';\nimport AdminHeader from \"../../AdminHeader\";\nimport { routes } from \"../../../Controller/Routes\";\nimport { history } from \"../../../Controller/history\";\nimport { BASE_URL, S3_URL } from \"../../../Controller/common\";\nimport { get, isEmpty, has } from 'lodash'\nimport { createCategory, getCategoryById, updateCategory } from \"../../../Controller/api/category.Service\";\n\n\nconst { Content } = Layout;\n\nfunction getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nclass ManageCategories extends Component {\n  formRef = React.createRef()\n  state = {\n    buttonLoading: false,\n    loading: false,\n    imagesLoading: false,\n    fileList: [],\n    categoryData: {},\n    fetching: false\n  }\n\n  componentDidMount() {\n    const catId = this.props.match.params.id;\n    if (catId) {\n      this.setState({ fetching: true })\n      getCategoryById(catId).then((res) => {\n        this.setState({\n          fileList: res.data.response.category.images.map((image, index) => {\n            return {\n              uid: `-${index + 1}`,\n              name: image,\n              status: 'done',\n              url: `${S3_URL}${image}`\n            }\n          }),\n          imageUrl: `${S3_URL}${res.data.response.category.image}`,\n          categoryData: res.data.response.category,\n          fetching: false\n        })\n        this.formRef.current.setFieldsValue({\n          ...res.data.response.category\n        })\n      }).catch((err) => {\n        this.setState({ fetching: false })\n        console.log(\"err---->\", err)\n      })\n    }\n  }\n\n  handleChange = info => {\n    if (info.file.status === 'uploading') {\n      this.setState({ loading: true });\n      return;\n    }\n    if (info.file.status === 'done') {\n      // Get this url from response in real world.\n      this.formRef.current.setFieldsValue({\n        image: get(info, 'file.response.response.image', '')\n      })\n      getBase64(info.file.originFileObj, imageUrl =>\n        this.setState({\n          imageUrl,\n          loading: false,\n        }),\n      );\n    }\n  };\n  handleChangeImages = ({ fileList }) => {\n    console.log(fileList, 'here')\n    this.setState({ fileList })\n    this.formRef.current.setFieldsValue({\n      images: fileList.map((file, index) => {\n        if (has(file, 'response')) {\n          return file.response.response.image\n        }\n        else {\n          return file.name\n        }\n      })\n    })\n  };\n\n  handleRemove = (item) => {\n    console.log(item, 'remove')\n    this.setState({\n      fileList: this.state.fileList.filter(file => file.url !== item.url),\n\n    }, () => {\n      this.formRef.current.setFieldsValue({\n        images: [...this.state.fileList]\n      })\n    })\n  }\n\n  onFinish = (values) => {\n    this.setState({ buttonLoading: true })\n    const catId = this.props.match.params.id;\n    if (catId) {\n      updateCategory(values, catId).then((res) => {\n        this.setState({ buttonLoading: false })\n        history.push(routes.dashboard.categories.self);\n      }).catch((err) => {\n        console.log(\"edit err\", err)\n      })\n    } else {\n      createCategory(values).then((res) => {\n        this.setState({ buttonLoading: false })\n        history.push(routes.dashboard.categories.self);\n      }).catch((err) => {\n        this.setState({ buttonLoading: false })\n        console.log(\"error\")\n      })\n    }\n  }\n\n  render() {\n    const { loading, imageUrl, fileList, imagesLoading } = this.state;\n    const catId = this.props.match.params.id;\n    const uploadButton = (\n      <div>\n        {loading ? <LoadingOutlined /> : <PlusOutlined />}\n        <div style={{ marginTop: 8 }}>Upload</div>\n      </div>\n    );\n    const uploadImagesButton = (\n      <div>\n        {imagesLoading ? <LoadingOutlined /> : <PlusOutlined />}\n        <div style={{ marginTop: 8 }}>Upload Images</div>\n      </div>\n    );\n    if (this.state.fetching) {\n      return <Spin size=\"large\" />\n    }\n    return (\n      <React.Fragment>\n        <Layout className=\"layout\">\n          <AdminHeader />\n          <Content style={{ padding: '20px' }}>\n            <div className=\"site-layout-content\">\n              <Card title={catId ? \"Edit Category\" : \"Create Category\"} extra={<Button type=\"primary\" onClick={() => history.push(routes.dashboard.categories.self)}>Catetories</Button>}>\n                <Form\n                  ref={this.formRef}\n                  name=\"basic\"\n                  labelCol={{\n                    span: 5,\n                  }}\n                  wrapperCol={{\n                    span: 8,\n                  }}\n                  onFinish={this.onFinish}\n                  // onFinishFailed={onFinishFailed}\n                  autoComplete=\"off\"\n                >\n                  <Form.Item\n                    label=\"Category Name\"\n                    name=\"name\"\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Please Enter Category Name',\n                      },\n                    ]}\n                  >\n                    <Input />\n                  </Form.Item>\n                  <Form.Item\n                    label=\"Subtitle\"\n                    name=\"subtitle\"\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Please Enter Category Subtitle!',\n                      },\n                    ]}\n                  >\n                    <Input.TextArea maxLength={170} />\n                  </Form.Item>\n                  <Form.Item\n                    label=\"Description\"\n                    name=\"description\"\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Please Enter Category Description!',\n                      },\n                    ]}\n                  >\n                    <Input.TextArea />\n                  </Form.Item>\n                  <Form.Item\n                    label=\"Category Image(651PX X 651PX)\"\n                    name=\"image\"\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Please Upload Category Image',\n                      },\n                    ]}\n                  >\n                    <Upload\n                      name=\"image\"\n                      listType=\"picture-card\"\n                      className=\"avatar-uploader\"\n                      showUploadList={false}\n                      action={`${BASE_URL}/upload-image/`}\n                      //beforeUpload={beforeUpload}\n                      onChange={this.handleChange}\n                    >\n                      {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\n                    </Upload>\n                  </Form.Item>\n\n\n                  <Form.Item\n                    label=\"Category Images (345px × 533px)\"\n                    name=\"images\"\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Please Upload 3 side category images',\n                      },\n                    ]}\n                  >\n                    <Upload\n                      name=\"image\"\n                      listType=\"picture-card\"\n                      className=\"avatar-uploader\"\n                      // multiple={true}\n                      // showUploadList={true}\n                      fileList={isEmpty(fileList) ? null : fileList}\n                      action={`${BASE_URL}/upload-image/`}\n                      //beforeUpload={beforeUpload}\n                      onChange={this.handleChangeImages}\n                      onRemove={this.handleRemove}\n                    >\n                      {fileList.length >= 3 ? null : uploadImagesButton}\n                    </Upload>\n                  </Form.Item>\n\n                  <Form.Item\n                    wrapperCol={{\n                      offset: 5,\n                      span: 12,\n                    }}\n                  >\n                    <Button style={{ width: \"200px\" }} loading={this.state.buttonLoading} type=\"primary\" htmlType=\"submit\">\n                      {catId ? \"Edit\" : \"Create\"}\n                    </Button>\n                  </Form.Item>\n                </Form>\n              </Card>\n            </div>\n          </Content>\n        </Layout>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ManageCategories;\n"]},"metadata":{},"sourceType":"module"}